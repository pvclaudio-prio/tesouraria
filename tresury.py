import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from io import BytesIO
from pathlib import Path
import plotly.express as px
import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import zipfile
import tempfile
import json
from oauth2client.client import OAuth2Credentials
import httplib2
import traceback
import httpx
from sentence_transformers import SentenceTransformer, util
from openai import OpenAI
import requests
from difflib import get_close_matches
import re
import matplotlib.pyplot as plt
from docx import Document
from docx.shared import Pt
from pandas import Timestamp
from google.cloud import documentai_v1 as docai_v1
from google.cloud import documentai_v1beta3 as docai_v1beta3
from google.oauth2 import service_account
import docx
import uuid
import openpyxl
import time
from docx2pdf import convert
from PyPDF2 import PdfReader, PdfWriter
import io

st.set_page_config(layout='wide')

# ‚úÖ Cliente oficial OpenAI (Responses API)
client = OpenAI(api_key=st.secrets["openai"]["api_key"])

# =========================
# üöÄ Helper: GPT‚Äë5 (Responses API)
# =========================

def gpt5(messages, *, temperature=0, max_output_tokens=1200, reasoning_effort="minimal") -> str:
    """
    Wrapper do Responses API para chamar o GPT‚Äë5.
    - `messages`: lista de {"role": "system"|"user"|"assistant", "content": str}
    - usa `max_output_tokens` e `reasoning={"effort": ...}`
    Retorna `output_text`.
    """
    resp = client.responses.create(
        model="gpt-5",
        input=messages,
        temperature=temperature,
        max_output_tokens=max_output_tokens,
        reasoning={"effort": reasoning_effort},
    )
    return (getattr(resp, "output_text", "") or "").strip()

# -----------------------------
# Valida√ß√£o Usu√°rios com st.secrets
# -----------------------------
@st.cache_data
def carregar_usuarios():
    usuarios_config = st.secrets.get("users", {})
    usuarios = {}
    for user, dados in usuarios_config.items():
        try:
            nome, senha = dados.split("|", 1)
            usuarios[user] = {"name": nome, "password": senha}
        except Exception:
            st.warning(f"Erro ao carregar usu√°rio '{user}' nos secrets.")
    return usuarios

users = carregar_usuarios()

# Estado de sess√£o
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""

# -----------------------------
# Tela de Login
# -----------------------------
if not st.session_state.logged_in:
    st.title("üîê Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")

    if st.button("Entrar"):
        user = users.get(username)
        if user and user["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Bem-vindo, {user['name']}!")
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

# -----------------------------
# Menu lateral ap√≥s login
# -----------------------------
st.sidebar.image("PRIO_SEM_POLVO_PRIO_PANTONE_LOGOTIPO_Azul.png")

nome_usuario = users[st.session_state.username]["name"]
st.sidebar.success(f"Logado como: {nome_usuario}")

if st.sidebar.button("Logout"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.rerun()

# -----------------------------
# Menu de Navega√ß√£o
# -----------------------------
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Ir para:", [
    "üìÇ Upload do Contrato",
    "üßæ Valida√ß√£o das Cl√°usulas",
    "üîç An√°lise Autom√°tica",
    "üßë‚Äç‚öñÔ∏è Revis√£o Final",
    "üìä √çndices PRIO",
    "üìò Relat√≥rios Gerenciais"
])

# =========================
# Fun√ß√µes de conex√£o com o Google Drive
# =========================

def conectar_drive():
    cred_dict = st.secrets["credentials"]

    credentials = OAuth2Credentials(
        access_token=cred_dict["access_token"],
        client_id=cred_dict["client_id"],
        client_secret=cred_dict["client_secret"],
        refresh_token=cred_dict["refresh_token"],
        token_expiry=datetime.strptime(cred_dict["token_expiry"], "%Y-%m-%dT%H:%M:%SZ"),
        token_uri=cred_dict["token_uri"],
        user_agent="streamlit-app/1.0",
        revoke_uri=cred_dict["revoke_uri"]
    )

    if credentials.access_token_expired:
        credentials.refresh(httplib2.Http())

    gauth = GoogleAuth()
    gauth.credentials = credentials
    return GoogleDrive(gauth)


def obter_id_pasta(nome_pasta, parent_id=None):
    drive = conectar_drive()
    query = f"title = '{nome_pasta}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
    if parent_id:
        query += f" and '{parent_id}' in parents"
    resultado = drive.ListFile({'q': query}).GetList()
    if resultado:
        return resultado[0]['id']
    return None

# =========================
# Base de contratos
# =========================

def aba_upload_contrato(user_email):
    st.title("üìÇ Upload do Contrato")

    st.markdown("Fa√ßa upload de um contrato em `.pdf` e preencha os dados abaixo.")

    arquivo = st.file_uploader("Selecione o contrato", type=["pdf"])
    nome_amigavel = st.text_input("Nome do contrato para exibi√ß√£o futura (ex: FAB PRIO - Empr√©stimo 2025)")
    instituicao = st.text_input("Institui√ß√£o Financeira")
    idioma = st.selectbox("Idioma do Contrato", ["pt", "en"])

    if st.button("üì§ Enviar Contrato"):
        if not arquivo or not nome_amigavel or not instituicao:
            st.warning("Por favor, preencha todos os campos e envie um arquivo.")
            return

        drive = conectar_drive()
        pasta_contratos_id = obter_id_pasta("contratos", parent_id=obter_id_pasta("Tesouraria"))

        id_contrato = str(uuid.uuid4())
        nome_arquivo_drive = f"{id_contrato}_{arquivo.name}"

        # Salvar temporariamente
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{arquivo.name.split('.')[-1]}") as tmp:
            tmp.write(arquivo.read())
            caminho_local = tmp.name

        # Upload para o Drive
        novo_arquivo = drive.CreateFile({
            'title': nome_arquivo_drive,
            'parents': [{'id': pasta_contratos_id}]
        })
        novo_arquivo.SetContentFile(caminho_local)
        novo_arquivo.Upload()

        # Atualizar base
        df = carregar_base_contratos()
        novo = {
            "id_contrato": id_contrato,
            "nome_arquivo": nome_amigavel,
            "tipo": arquivo.name.split(".")[-1],
            "idioma": idioma,
            "instituicao_financeira": instituicao,
            "data_upload": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "usuario_upload": user_email,
            "clausulas": "",
            "user_email": user_email
        }
        df = pd.concat([df, pd.DataFrame([novo])], ignore_index=True)
        salvar_base_contratos(df)

        st.success("‚úÖ Contrato enviado e registrado com sucesso.")


def carregar_base_contratos():
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    if not pasta_bases_id:
        st.error("Pasta 'bases' n√£o encontrada.")
        return pd.DataFrame()

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'base_contratos.xlsx' and trashed = false"
    }).GetList()

    if not arquivos:
        return pd.DataFrame(columns=[
            "id_contrato", "nome_arquivo", "data_upload", "usuario_upload",
            "clausulas", "instituicao_financeira", "tipo", "idioma", "user_email"
        ])

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    arquivos[0].GetContentFile(caminho_temp)
    df = pd.read_excel(caminho_temp)

    if "clausulas" in df.columns:
        df["clausulas"] = df["clausulas"].astype(str)

    return df


def salvar_base_contratos(df):
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    pasta_backups_id = obter_id_pasta("backups", parent_id=obter_id_pasta("Tesouraria"))

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    df.to_excel(caminho_temp, index=False)

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'base_contratos.xlsx' and trashed = false"
    }).GetList()

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': 'base_contratos.xlsx',
            'parents': [{'id': pasta_bases_id}]
        })

    arquivo.SetContentFile(caminho_temp)
    arquivo.Upload()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup = drive.CreateFile({
        'title': f'base_contratos__{timestamp}.xlsx',
        'parents': [{'id': pasta_backups_id}]
    })
    backup.SetContentFile(caminho_temp)
    backup.Upload()

# =========================
# Manipula√ß√£o de contratos
# =========================

def obter_contratos_disponiveis():
    drive = conectar_drive()
    pasta_id = obter_id_pasta("contratos", parent_id=obter_id_pasta("Tesouraria"))
    arquivos = drive.ListFile({'q': f"'{pasta_id}' in parents and trashed = false"}).GetList()
    return [(arq['title'], arq['id']) for arq in arquivos]


def docx_para_pdf_temporario(caminho_docx):
    caminho_temp_dir = tempfile.mkdtemp()
    caminho_pdf = os.path.join(caminho_temp_dir, "convertido.pdf")
    convert(caminho_docx, caminho_pdf)
    return caminho_pdf


def extrair_com_document_ai_paginas(caminho_pdf, max_paginas=15):
    credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_docai"])
    project_id = st.secrets["gcp_docai"]["project_id"]
    processor_id = st.secrets["gcp_docai"]["processor_id"]
    location = "us"

    client_docai = docai_v1.DocumentProcessorServiceClient(credentials=credentials)
    name = f"projects/{project_id}/locations/{location}/processors/{processor_id}"

    leitor = PdfReader(caminho_pdf)
    total_paginas = len(leitor.pages)
    texto_total = ""

    for i in range(0, total_paginas, max_paginas):
        escritor = PdfWriter()
        for j in range(i, min(i + max_paginas, total_paginas)):
            escritor.add_page(leitor.pages[j])

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_pdf:
            escritor.write(temp_pdf)
            temp_pdf.flush()
            with open(temp_pdf.name, "rb") as f:
                document = {"content": f.read(), "mime_type": "application/pdf"}

        request = {"name": name, "raw_document": document}
        result = client_docai.process_document(request=request)
        texto_total += result.document.text + ""

    return texto_total.strip()


def executar_document_ai(caminho_pdf):
    # Mantido por compatibilidade (se necess√°rio em algum fluxo legado)
    credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_docai"])
    project_id = st.secrets["gcp_docai"]["project_id"]
    location = "us"
    processor_id = st.secrets["gcp_docai"]["processor_id"]

    client_docai = docai_v1beta3.DocumentUnderstandingServiceClient(credentials=credentials)
    name = f"projects/{project_id}/locations/{location}/processors/{processor_id}"

    with open(caminho_pdf, "rb") as f:
        document = {"content": f.read(), "mime_type": "application/pdf"}

    request = {"name": name, "raw_document": document}
    result = client_docai.process_document(request=request)
    return result.document.text

# =========================
# Extra√ß√£o de cl√°usulas via IA (GPT‚Äë5)
# =========================

def carregar_texto_contrato_drive(titulo_arquivo, arquivo_id):
    drive = conectar_drive()
    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    drive.CreateFile({'id': arquivo_id}).GetContentFile(caminho_temp)

    try:
        if titulo_arquivo.lower().endswith(".docx"):
            caminho_pdf = docx_para_pdf_temporario(caminho_temp)
            texto = extrair_com_document_ai_paginas(caminho_pdf)
            os.remove(caminho_pdf)
        elif titulo_arquivo.lower().endswith(".pdf"):
            texto = extrair_com_document_ai_paginas(caminho_temp)
        else:
            st.error("‚ùå Formato de arquivo n√£o suportado. Use .docx ou .pdf.")
            return ""
    except Exception as e:
        st.error(f"‚ùå Erro ao extrair o contrato: {e}")
        return ""

    return texto


def aba_validacao_clausulas():
    st.title("üßæ Valida√ß√£o das Cl√°usulas Contratuais")

    contratos = obter_contratos_disponiveis()
    if not contratos:
        st.warning("Nenhum contrato dispon√≠vel.")
        return

    nomes_arquivos = [titulo for titulo, _ in contratos]
    contrato_selecionado = st.selectbox("Selecione o contrato para an√°lise:", nomes_arquivos)

    if not contrato_selecionado:
        st.stop()

    titulo_arquivo, id_arquivo = next(item for item in contratos if item[0] == contrato_selecionado)

    # Extrai id_contrato do nome do arquivo (antes do primeiro "_")
    id_contrato = titulo_arquivo.split("_")[0]

    st.markdown("### üìÑ Visualiza√ß√£o do conte√∫do do contrato")
    texto = carregar_texto_contrato_drive(titulo_arquivo, id_arquivo)

    with st.expander("Visualizar texto completo extra√≠do do contrato"):
        st.text_area("Conte√∫do extra√≠do", texto, height=400)

    if st.button("‚úÖ Extrair Cl√°usulas com IA"):
        df_clausulas = extrair_clausulas_robusto(texto)
        st.session_state["df_clausulas_extraidas"] = df_clausulas
        st.success("‚úÖ Cl√°usulas extra√≠das com sucesso!")

    if "df_clausulas_extraidas" in st.session_state:
        st.markdown("### ‚úçÔ∏è Revisar Cl√°usulas Extra√≠das")
        df_editado = st.data_editor(
            st.session_state["df_clausulas_extraidas"],
            num_rows="dynamic",
            use_container_width=True,
            key="editor_clausulas"
        )

        if st.button("‚úÖ Validar cl√°usulas e salvar"):
            sucesso = salvar_clausulas_validadas(df_editado, id_contrato)
            if sucesso:
                st.success("üì¶ Cl√°usulas validadas e salvas com sucesso.")
            else:
                st.error("‚ùå Contrato n√£o encontrado na base para atualiza√ß√£o.")


def dividir_em_chunks_simples(texto, max_chars=7000):
    paragrafos = texto.split("

")
    chunks = []
    atual = ""

    for p in paragrafos:
        if len(atual) + len(p) + 2 <= max_chars:
            atual += p + "

"
        else:
            chunks.append(atual.strip())
            atual = p + "

"
    if atual:
        chunks.append(atual.strip())

    return chunks


def gerar_prompt_com_exemplos(texto_chunk):
    exemplos = """
Exemplos de cl√°usulas extra√≠das corretamente:

The Lender agrees, subject to the terms and conditions hereof, to make available to the Borrower the Loan, in one disbursement during the Availability Period upon receipt of a Drawdown Request from the Borrower not later than the Specified Time.

The Borrower shall treat the proceeds of the Loan as a recebimento antecipado de exporta√ß√£o in accordance with the regulations issued by the Central Bank of Brazil. Promptly upon the receipt of the Loan, the Borrower shall enter into an appropriate foreign exchange transaction in order to convert the amount of the Loan proceeds from U.S. Dollars into Brazilian currency (reais) in accordance with the regulations of the Central Bank of Brazil.

The Borrower agrees to contract, execute and perform all of the foreign exchange transactions entered into in connection with this Agreement exclusively with the Lender.

The Borrower shall keep all copies of the shipping documents with respect to the respective export transaction, including documents conveying title to the Goods; the bill(s) of lading; the commercial invoice(s); and any other document which the Lender may reasonably request to attest the shipment of the Goods in a manner consistent with commercial export transactions.

Any Loan amounts which, at that time, are unutilized shall be immediately cancelled at the end of the Availability Period.

"""

    prompt = f"""
Voc√™ √© um advogado especializado em contratos de cr√©dito internacional.

Extraia todas as cl√°usulas do texto a seguir. Cada cl√°usula deve conter apenas:

- Texto completo da cl√°usula

N√£o inclua o seguinte:

- Numera√ß√£o (1., 2., 3.1, etc.)
- T√≠tulo da cl√°usula (se houver)

N√£o inclua resumos nem coment√°rios. Apresente a lista no mesmo formato dos exemplos abaixo.

{exemplos}

Agora processe o seguinte trecho:

\"\"\"{texto_chunk}\"\"\"
"""
    return prompt.strip()


def extrair_clausulas_robusto(texto):
    st.info("üîç Analisando o contrato...")
    partes = dividir_em_chunks_simples(texto)
    clausulas_total = []

    # ‚úÖ Barra de progresso durante a extra√ß√£o
    progress_bar = st.progress(0)
    status_text = st.empty()

    total = max(len(partes), 1)
    for i, chunk in enumerate(partes):
        status_text.text(f"Analisando trecho {i+1}/{total}...")
        with st.spinner(f"Processando IA no trecho {i+1}/{total}..."):
            prompt = gerar_prompt_com_exemplos(chunk)
            try:
                saida = gpt5(
                    [
                        {"role": "system", "content": "Voc√™ √© um especialista jur√≠dico com muita experi√™ncia e dom√≠nio em cl√°usulas de contratos de d√≠vida."},
                        {"role": "user", "content": prompt},
                    ],
                    temperature=0,
                    max_output_tokens=1800,
                    reasoning_effort="minimal",
                )
                linhas = [l.strip() for l in saida.split("
") if l.strip()]
                clausulas_total.extend(linhas)
            except Exception as e:
                clausulas_total.append(f"[Erro no chunk {i+1}]: {e}")
        progress_bar.progress((i + 1) / total)

    status_text.text("")
    df = pd.DataFrame(clausulas_total, columns=["clausula"])
    return df

# =========================
# Salvar cl√°usulas extra√≠das
# =========================

def salvar_clausulas_validadas(df_clausulas, id_contrato):
    df = carregar_base_contratos()
    if df.empty:
        return False

    df_clausulas["clausula"] = df_clausulas["clausula"].astype(str)
    clausulas_txt = "
".join(df_clausulas["clausula"].tolist())

    idx = df[df["id_contrato"] == id_contrato].index
    if len(idx) == 0:
        return False

    df.loc[idx[0], "clausulas"] = clausulas_txt
    salvar_base_contratos(df)
    return True

# =========================
# üìå Aba: An√°lise Autom√°tica das Cl√°usulas (GPT‚Äë5)
# =========================

def carregar_clausulas_contratos():
    df = carregar_base_contratos()
    if df.empty:
        return pd.DataFrame(columns=["nome_arquivo", "clausulas"])

    clausulas_expandidas = []

    for _, row in df.iterrows():
        texto = row.get("clausulas", "")
        if not isinstance(texto, str) or not texto.strip():
            continue
        clausulas = [c.strip() for c in texto.split("
") if c.strip()]
        for c in clausulas:
            clausulas_expandidas.append({
                "nome_arquivo": row["nome_arquivo"],
                "clausula": c
            })

    return pd.DataFrame(clausulas_expandidas)


def aba_analise_automatica():
    st.title("üß† An√°lise Autom√°tica das Cl√°usulas")

    df = carregar_clausulas_contratos()
    df_contrato = carregar_clausulas_analisadas()

    contratos_disponiveis = df["nome_arquivo"].dropna().unique().tolist()
    contrato_escolhido = st.selectbox("Selecione o contrato:", contratos_disponiveis)

    df_clausulas = df[df["nome_arquivo"] == contrato_escolhido].copy() if contrato_escolhido else pd.DataFrame()
    clausulas = [c.strip() for c in df_clausulas["clausula"].tolist() if c.strip()] if not df_clausulas.empty else []

    if clausulas:
        if st.button("‚úÖ Iniciar An√°lise Autom√°tica"):
            drive = conectar_drive()
            pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
            arquivos = drive.ListFile({
                'q': f"'{pasta_bases_id}' in parents and title = 'empresa_referencia_PRIO.xlsx' and trashed = false"
            }).GetList()
            if not arquivos:
                st.error("Base de √≠ndices financeiros 'empresa_referencia_PRIO.xlsx' n√£o encontrada.")
                return

            caminho_indices = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
            arquivos[0].GetContentFile(caminho_indices)
            df_indices = pd.read_excel(caminho_indices)

            resultados = []
            st.info("üîç Iniciando an√°lise com os especialistas jur√≠dico e financeiro (GPT‚Äë5)...")

            progress_bar = st.progress(0)
            status_text = st.empty()

            for i, clausula in enumerate(clausulas):
                status_text.text(f"Processando cl√°usula {i+1}/{len(clausulas)}...")
                with st.spinner():
                    # Agente Jur√≠dico
                    prompt_juridico = f"""
Voc√™ √© um advogado especialista em contratos de d√≠vida.
Analise a cl√°usula abaixo e diga se est√° Conforme ou se Necessita Revis√£o. Voc√™ somente pode escolher uma alternativa.
Sempre inicie sua resposta com exatamente as palavras Conforme ou Necessita Revis√£o.
Justifique de forma objetiva com base jur√≠dica.

Cl√°usula:
\"\"\"{clausula}\"\"\"
"""
                    resposta_juridico = gpt5(
                        [{"role": "user", "content": prompt_juridico}],
                        temperature=0,
                        max_output_tokens=800,
                        reasoning_effort="minimal",
                    )

                    # Agente Financeiro
                    texto_indices = df_indices.to_string(index=False)
                    prompt_financeiro = f"""
Voc√™ √© um especialista financeiro com foco em contratos de capta√ß√£o de d√≠vida. Abaixo est√£o os √≠ndices financeiros da empresa PRIO:

{texto_indices}

Analise a cl√°usula a seguir e diga se ela est√° financeiramente Conforme ou se Necessita Revis√£o. Voc√™ somente pode escolher uma alternativa.
Sempre inicie sua resposta com exatamente as palavras Conforme ou Necessita Revis√£o.
Caso a cl√°usula n√£o aborde nenhuma condicionante financeira, diga que est√° Conforme e no motivo informe objetivamente que n√£o foram identificados √≠ndices financeiros para an√°lise.
Justifique com base nos dados da empresa e benchmarking de mercado para casos semelhantes.

Cl√°usula:
\"\"\"{clausula}\"\"\"
"""
                    resposta_financeiro = gpt5(
                        [{"role": "user", "content": prompt_financeiro}],
                        temperature=0,
                        max_output_tokens=800,
                        reasoning_effort="minimal",
                    )

                    # Agente Supervisor
                    prompt_supervisor = f"""
Voc√™ √© o supervisor respons√°vel pela revis√£o final.
Abaixo est√° a cl√°usula, a an√°lise do agente jur√≠dico e a an√°lise do agente financeiro.
Revise cada uma delas e diga se Concorda ou N√£o Concorda, e explique brevemente o motivo.
Sempre inicie sua resposta com exatamente as palavras Concorda ou N√£o Concorda.

Cl√°usula:
\"\"\"{clausula}\"\"\"

An√°lise Jur√≠dica:
{resposta_juridico}

An√°lise Financeira:
{resposta_financeiro}
"""
                    resposta_supervisor = gpt5(
                        [{"role": "user", "content": prompt_supervisor}],
                        temperature=0,
                        max_output_tokens=800,
                        reasoning_effort="minimal",
                    )

                    resultados.append({
                        "nome_arquivo": contrato_escolhido,
                        "clausula": clausula,
                        "revisao_juridico": "Conforme" if "Conforme" in resposta_juridico else "Necessita Revis√£o",
                        "motivo_juridico": resposta_juridico,
                        "revisao_financeiro": "Conforme" if "Conforme" in resposta_financeiro else "Necessita Revis√£o",
                        "motivo_financeiro": resposta_financeiro,
                        "revisao_sup": "Concorda" if "Concorda" in resposta_supervisor else "N√£o Concorda",
                        "motivo_sup": resposta_supervisor,
                    })

                progress_bar.progress((i + 1) / len(clausulas))

            df_resultado = pd.DataFrame(resultados)
            st.session_state["analise_automatica_resultado"] = df_resultado
            st.success("‚úÖ An√°lise autom√°tica conclu√≠da.")

    else:
        st.warning("N√£o h√° cl√°usulas validadas dispon√≠veis.")

    # Resultado atual
    if "analise_automatica_resultado" in st.session_state:
        df_resultado = st.session_state["analise_automatica_resultado"]
        st.dataframe(df_resultado, use_container_width=True)

        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
            df_resultado.to_excel(writer, index=False)

        st.download_button("üì• Baixar An√°lises", data=buffer.getvalue(),
                           file_name="clausulas_analisadas.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                           key="download_novo")

        if st.button("Desejar Salvar ?", key="salvar_novo"):
            salvar_clausulas_validadas_usuario(df_resultado)
            st.success("‚úÖ Revis√£o final do usu√°rio salva com sucesso!")
            del st.session_state["analise_automatica_resultado"]

    elif df_contrato is not None and not df_contrato.empty:
        df_contrato = df_contrato[df_contrato["nome_arquivo"] == contrato_escolhido]
        if not df_contrato.empty:
            st.dataframe(df_contrato, use_container_width=True)
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                df_contrato.to_excel(writer, index=False)
            st.download_button("üì• Baixar An√°lises", data=buffer.getvalue(),
                               file_name="clausulas_analisadas.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                               key="download_anterior")


def carregar_clausulas_analisadas():
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'clausulas_analisadas.xlsx' and trashed = false"
    }).GetList()

    if not arquivos:
        st.warning("‚ùå Base de cl√°usulas analisadas n√£o encontrada.")
        return pd.DataFrame(columns=[
            "nome_arquivo", "clausula",
            "analise_juridico_status", "analise_juridico_motivo",
            "analise_financeiro_status", "analise_financeiro_motivo",
            "revisao_juridico_status", "revisao_juridico_motivo",
            "revisao_financeiro_status", "revisao_financeiro_motivo"
        ])

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    arquivos[0].GetContentFile(caminho_temp)
    return pd.read_excel(caminho_temp)


def salvar_clausulas_validadas_usuario(df_novo):
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    pasta_backups_id = obter_id_pasta("backups", parent_id=obter_id_pasta("Tesouraria"))

    nome_arquivo = "clausulas_analisadas.xlsx"
    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = '{nome_arquivo}' and trashed = false"
    }).GetList()

    if arquivos:
        caminho_antigo = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
        arquivos[0].GetContentFile(caminho_antigo)
        df_existente = pd.read_excel(caminho_antigo)

        contrato_atual = df_novo["nome_arquivo"].iloc[0]
        df_existente = df_existente[df_existente["nome_arquivo"] != contrato_atual]

        df_final = pd.concat([df_existente, df_novo], ignore_index=True)
    else:
        df_final = df_novo

    df_final.to_excel(caminho_temp, index=False)

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': nome_arquivo,
            'parents': [{'id': pasta_bases_id}]
        })

    arquivo.SetContentFile(caminho_temp)
    arquivo.Upload()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup = drive.CreateFile({
        'title': f'clausulas_analisadas__{timestamp}.xlsx',
        'parents': [{'id': pasta_backups_id}]
    })
    backup.SetContentFile(caminho_temp)
    backup.Upload()


def carregar_clausulas_validadas():
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'clausulas_validadas.xlsx' and trashed = false"
    }).GetList()

    if not arquivos:
        st.warning("‚ùå Base de cl√°usulas validadas n√£o encontrada.")
        return pd.DataFrame(columns=[
            "nome_arquivo", "clausula",
            "analise_juridico_status", "analise_juridico_motivo",
            "analise_financeiro_status", "analise_financeiro_motivo",
            "revisao_juridico_status", "revisao_juridico_motivo",
            "revisao_financeiro_status", "revisao_financeiro_motivo",
            "user_revisao", "motivo_user"
        ])

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    arquivos[0].GetContentFile(caminho_temp)
    return pd.read_excel(caminho_temp)

# =========================
# üìå Aba: Revis√£o Final
# =========================

def aba_revisao_final():
    st.title("üßë‚Äç‚öñÔ∏è Revis√£o Final do Usu√°rio - Cl√°usulas Contratuais")

    df = carregar_clausulas_validadas()
    with st.spinner("Carregando cl√°usulas analisadas..."):
        df = carregar_clausulas_analisadas()
    if df.empty:
        st.warning("Nenhuma cl√°usula analisada dispon√≠vel.")

    contratos_disponiveis = df["nome_arquivo"].unique().tolist()
    contrato = st.selectbox("Selecione o contrato:", contratos_disponiveis)

    df_filtrado = df[df["nome_arquivo"] == contrato].copy()

    st.markdown("### üìù Revis√£o Final do Usu√°rio")

    for col in ["user_revisao", "motivo_user"]:
        if col not in df_filtrado.columns:
            df_filtrado[col] = ""

    df_editado = st.data_editor(
        df_filtrado,
        use_container_width=True,
        num_rows="dynamic",
        column_order=[
            "clausula",
            "revisao_juridico", "motivo_juridico",
            "revisao_financeiro", "motivo_financeiro",
            "revisao_sup", "motivo_sup",
            "user_revisao", "motivo_user"
        ],
        disabled=[
            "nome_arquivo", "clausula",
            "revisao_juridico", "motivo_juridico",
            "revisao_financeiro", "motivo_financeiro",
            "revisao_sup", "motivo_sup"
        ],
        key="revisao_final_editor"
    )

    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df_editado.to_excel(writer, index=False)
    st.download_button("üì• Baixar An√°lises", data=buffer.getvalue(), file_name="clausulas_validadas.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    if st.button("‚úÖ Salvar revis√£o final do usu√°rio"):
        salvar_clausulas_revisadas_usuario(df_editado)
        st.success("‚úÖ Revis√£o final do usu√°rio salva com sucesso!")


def salvar_clausulas_revisadas_usuario(df_novo):
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    pasta_backups_id = obter_id_pasta("backups", parent_id=obter_id_pasta("Tesouraria"))

    nome_arquivo = "clausulas_validadas.xlsx"
    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = '{nome_arquivo}' and trashed = false"
    }).GetList()

    if arquivos:
        caminho_antigo = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
        arquivos[0].GetContentFile(caminho_antigo)
        df_existente = pd.read_excel(caminho_antigo)

        contrato_atual = df_novo["nome_arquivo"].iloc[0]
        df_existente = df_existente[df_existente["nome_arquivo"] != contrato_atual]

        df_final = pd.concat([df_existente, df_novo], ignore_index=True)
    else:
        df_final = df_novo

    df_final.to_excel(caminho_temp, index=False)

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': nome_arquivo,
            'parents': [{'id': pasta_bases_id}]
        })

    arquivo.SetContentFile(caminho_temp)
    arquivo.Upload()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup = drive.CreateFile({
        'title': f'clausulas_validadas__{timestamp}.xlsx',
        'parents': [{'id': pasta_backups_id}]
    })
    backup.SetContentFile(caminho_temp)
    backup.Upload()

# =========================
# üìå Aba: √çndices PRIO
# =========================

def aba_indices_prio():
    st.title("üìä √çndices Financeiros da PRIO")

    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    pasta_backups_id = obter_id_pasta("backups", parent_id=obter_id_pasta("Tesouraria"))

    nome_arquivo = "empresa_referencia_PRIO.xlsx"

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = '{nome_arquivo}' and trashed = false"
    }).GetList()

    if not arquivos:
        st.warning("Base 'empresa_referencia_PRIO.xlsx' n√£o encontrada. Ser√° criada uma nova base.")
        df_indices = pd.DataFrame(columns=["EBITDA", "Mrg EBITDA", "Res Fin", "D√≠vida", "Lucro L√≠q", "Caixa"])
    else:
        caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
        arquivos[0].GetContentFile(caminho_temp)
        df_indices = pd.read_excel(caminho_temp)

    st.markdown("### ‚úçÔ∏è Editar √çndices")
    df_editado = st.data_editor(
        df_indices,
        num_rows="dynamic",
        use_container_width=True,
        key="editor_indices_prio"
    )

    if st.button("üíæ Salvar √çndices"):
        caminho_temp_salvar = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
        df_editado.to_excel(caminho_temp_salvar, index=False)

        if arquivos:
            arquivo = arquivos[0]
        else:
            arquivo = drive.CreateFile({
                'title': nome_arquivo,
                'parents': [{'id': pasta_bases_id}]
            })

        arquivo.SetContentFile(caminho_temp_salvar)
        arquivo.Upload()

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup = drive.CreateFile({
            'title': f"empresa_referencia_PRIO__{timestamp}.xlsx",
            'parents': [{'id': pasta_backups_id}]
        })
        backup.SetContentFile(caminho_temp_salvar)
        backup.Upload()

        st.success("‚úÖ √çndices salvos e backup criado com sucesso!")

# =========================
# üìå Aba: Relat√≥rio Gerencial (GPT‚Äë5)
# =========================

def aba_relatorios_gerenciais():
    st.title("üìò Relat√≥rio Gerencial - A√ß√µes Priorit√°rias por Contrato")

    df = carregar_clausulas_validadas()
    if df.empty:
        st.warning("Base de cl√°usulas validadas est√° vazia.")
        return

    contratos = df["nome_arquivo"].unique().tolist()
    contrato_selecionado = st.selectbox("Selecione o contrato para an√°lise:", contratos)

    if not contrato_selecionado:
        return

    if st.button("‚úÖ Executar an√°lise"):
        clausulas_contrato = df[df["nome_arquivo"] == contrato_selecionado]["clausula"].tolist()

        texto_clausulas = "

".join(clausulas_contrato)
        prompt = f"""
Voc√™ √© um especialista jur√≠dico em gest√£o contratual e compliance.

Com base nas cl√°usulas abaixo, elenque de forma objetiva e por ordem de signific√¢ncia as principais a√ß√µes que o usu√°rio deve realizar para garantir a seguran√ßa jur√≠dica do contrato.

As a√ß√µes precisam ser espec√≠ficas para as cl√°usulas do contrato marcadas como Necessita Revis√£o. N√£o traga a√ß√µes generalistas, seja cr√≠tico, objetivo e especialista.

Sua resposta deve conter no m√°ximo 1 p√°gina e apresentar as a√ß√µes com t√≠tulos curtos, seguidos de explica√ß√µes objetivas (1 par√°grafo por a√ß√£o). Seja direto, t√©cnico e evite repeti√ß√µes.

Mantenha sempre uma breve refer√™ncia √† cl√°usula que precisa ser revisada para assegurar a conformidade.

Cl√°usulas do contrato:
\"\"\"{texto_clausulas}\"\"\"
"""

        with st.spinner("Gerando an√°lise (GPT‚Äë5)..."):
            analise_final = gpt5(
                [
                    {"role": "system", "content": "Voc√™ √© um consultor jur√≠dico especialista em contratos de capta√ß√£o de d√≠vida internacionais."},
                    {"role": "user", "content": prompt},
                ],
                temperature=0,
                max_output_tokens=1800,
                reasoning_effort="minimal",
            )

        st.markdown("### ‚úÖ An√°lise Gerada:")
        st.markdown(analise_final)

        buffer = BytesIO()
        doc = Document()
        doc.add_heading(f"Relat√≥rio Gerencial - {contrato_selecionado}", level=1)
        for par in analise_final.split("
"):
            if par.strip():
                doc.add_paragraph(par.strip())
        doc.save(buffer)
        st.download_button(
            label="üì• Baixar An√°lise",
            data=buffer.getvalue(),
            file_name=f"relatorio_gerencial_{contrato_selecionado}.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

# -----------------------------
# Renderiza√ß√£o de conte√∫do por p√°gina
# -----------------------------
if pagina == "üìÇ Upload do Contrato":
    aba_upload_contrato(user_email=st.session_state.username)

elif pagina == "üßæ Valida√ß√£o das Cl√°usulas":
    aba_validacao_clausulas()

elif pagina == "üîç An√°lise Autom√°tica":
    aba_analise_automatica()

elif pagina == "üßë‚Äç‚öñÔ∏è Revis√£o Final":
    aba_revisao_final()

elif pagina == "üìä √çndices PRIO":
    aba_indices_prio()

elif pagina == "üìò Relat√≥rios Gerenciais":
    aba_relatorios_gerenciais()
