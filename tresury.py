import streamlit as st
import pandas as pd
from datetime import datetime, date
from io import BytesIO
from pathlib import Path
import plotly.express as px
import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import zipfile
import tempfile
import json
from oauth2client.client import OAuth2Credentials
import httplib2
import traceback
import httpx
from sentence_transformers import SentenceTransformer, util
from openai import OpenAI
import json
import requests
from difflib import get_close_matches
import re
from datetime import timedelta
import matplotlib.pyplot as plt
from docx import Document
from docx.shared import Pt
from pandas import Timestamp
from google.cloud import documentai_v1 as documentai
from google.oauth2 import service_account
import openai
import docx
import uuid
import openpyxl

st.set_page_config(layout = 'wide')
client = OpenAI(api_key=st.secrets["openai"]["api_key"])

# -----------------------------
# Valida√ß√£o Usu√°rios com st.secrets
# -----------------------------
@st.cache_data
def carregar_usuarios():
    usuarios_config = st.secrets.get("users", {})
    usuarios = {}
    for user, dados in usuarios_config.items():
        try:
            nome, senha = dados.split("|", 1)
            usuarios[user] = {"name": nome, "password": senha}
        except:
            st.warning(f"Erro ao carregar usu√°rio '{user}' nos secrets.")
    return usuarios

users = carregar_usuarios()

# Inicializa vari√°veis de sess√£o
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""

# -----------------------------
# Tela de Login
# -----------------------------
if not st.session_state.logged_in:
    st.title("üîê Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")

    if st.button("Entrar"):
        user = users.get(username)
        if user and user["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Bem-vindo, {user['name']}!")
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

# -----------------------------
# Menu lateral ap√≥s login
# -----------------------------
st.sidebar.image("PRIO_SEM_POLVO_PRIO_PANTONE_LOGOTIPO_Azul.png")

nome_usuario = users[st.session_state.username]["name"]
st.sidebar.success(f"Logado como: {nome_usuario}")

if st.sidebar.button("Logout"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.rerun()

# -----------------------------
# Menu de Navega√ß√£o
# -----------------------------
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Ir para:", [
    "üìÇ Upload do Contrato",
    "üßæ Valida√ß√£o das Cl√°usulas",
    "üîç An√°lise Autom√°tica",
    "üßë‚Äç‚öñÔ∏è Revis√£o Final",
    "üìä √çndices PRIO",
    "üìò Relat√≥rios Gerenciais",
    "üìÅ Base de Cl√°usulas Padr√£o"
])

# =========================
# Fun√ß√µes de conex√£o com o Google Drive
# =========================
def conectar_drive():
    cred_dict = st.secrets["credentials"]

    credentials = OAuth2Credentials(
        access_token=cred_dict["access_token"],
        client_id=cred_dict["client_id"],
        client_secret=cred_dict["client_secret"],
        refresh_token=cred_dict["refresh_token"],
        token_expiry=datetime.strptime(cred_dict["token_expiry"], "%Y-%m-%dT%H:%M:%SZ"),
        token_uri=cred_dict["token_uri"],
        user_agent="streamlit-app/1.0",
        revoke_uri=cred_dict["revoke_uri"]
    )

    if credentials.access_token_expired:
        credentials.refresh(httplib2.Http())

    gauth = GoogleAuth()
    gauth.credentials = credentials
    return GoogleDrive(gauth)

def obter_id_pasta(nome_pasta, parent_id=None):
    drive = conectar_drive()
    query = f"title = '{nome_pasta}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
    if parent_id:
        query += f" and '{parent_id}' in parents"
    resultado = drive.ListFile({'q': query}).GetList()
    if resultado:
        return resultado[0]['id']
    return None

# =========================
# Base de contratos
# =========================

def aba_upload_contrato(user_email):
    st.title("üìÇ Upload do Contrato")

    st.markdown("Fa√ßa upload de um contrato em `.pdf` ou `.docx` e preencha os dados abaixo.")

    arquivo = st.file_uploader("Selecione o contrato", type=["pdf", "docx"])
    instituicao = st.text_input("Institui√ß√£o Financeira")
    idioma = st.selectbox("Idioma do Contrato", ["pt", "en"])

    if st.button("üì§ Enviar Contrato"):
        if not arquivo or not instituicao:
            st.warning("Por favor, preencha todos os campos e envie um arquivo.")
            return

        drive = conectar_drive()
        pasta_contratos_id = obter_id_pasta("contratos", parent_id=obter_id_pasta("Tesouraria"))

        id_contrato = str(uuid.uuid4())
        nome_final = f"{id_contrato}_{arquivo.name}"

        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{arquivo.name.split('.')[-1]}") as tmp:
            tmp.write(arquivo.read())
            caminho_local = tmp.name

        novo_arquivo = drive.CreateFile({
            'title': nome_final,
            'parents': [{'id': pasta_contratos_id}]
        })
        novo_arquivo.SetContentFile(caminho_local)
        novo_arquivo.Upload()

        df = carregar_base_contratos()
        novo = {
            "id_contrato": id_contrato,
            "nome_arquivo": nome_final,
            "tipo": arquivo.name.split(".")[-1],
            "idioma": idioma,
            "instituicao_financeira": instituicao,
            "data_upload": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "usuario_upload": user_email,
            "clausulas": "",
            "user_email": user_email
        }
        df = pd.concat([df, pd.DataFrame([novo])], ignore_index=True)
        salvar_base_contratos(df)

        st.success("‚úÖ Contrato enviado e registrado com sucesso.")

def carregar_base_contratos():
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    if not pasta_bases_id:
        st.error("Pasta 'bases' n√£o encontrada.")
        return pd.DataFrame()

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'base_contratos.xlsx' and trashed = false"
    }).GetList()

    if not arquivos:
        return pd.DataFrame(columns=[
            "id_contrato", "nome_arquivo", "data_upload", "usuario_upload",
            "clausulas", "instituicao_financeira", "tipo", "idioma", "user_email"
        ])

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    arquivos[0].GetContentFile(caminho_temp)
    return pd.read_excel(caminho_temp)

def salvar_base_contratos(df):
    drive = conectar_drive()
    pasta_bases_id = obter_id_pasta("bases", parent_id=obter_id_pasta("Tesouraria"))
    pasta_backups_id = obter_id_pasta("backups", parent_id=obter_id_pasta("Tesouraria"))

    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx").name
    df.to_excel(caminho_temp, index=False)

    arquivos = drive.ListFile({
        'q': f"'{pasta_bases_id}' in parents and title = 'base_contratos.xlsx' and trashed = false"
    }).GetList()

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': 'base_contratos.xlsx',
            'parents': [{'id': pasta_bases_id}]
        })

    arquivo.SetContentFile(caminho_temp)
    arquivo.Upload()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup = drive.CreateFile({
        'title': f'base_contratos__{timestamp}.xlsx',
        'parents': [{'id': pasta_backups_id}]
    })
    backup.SetContentFile(caminho_temp)
    backup.Upload()

# =========================
# Manipula√ß√£o de contratos
# =========================
def obter_contratos_disponiveis():
    drive = conectar_drive()
    pasta_id = obter_id_pasta("contratos", parent_id=obter_id_pasta("Tesouraria"))
    arquivos = drive.ListFile({'q': f"'{pasta_id}' in parents and trashed = false"}).GetList()
    return [(arq['title'], arq['id']) for arq in arquivos]

def carregar_texto_contrato(titulo_arquivo, arquivo_id):
    drive = conectar_drive()
    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    drive.CreateFile({'id': arquivo_id}).GetContentFile(caminho_temp)

    if titulo_arquivo.lower().endswith(".docx"):
        doc = docx.Document(caminho_temp)
        texto = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
    elif titulo_arquivo.lower().endswith(".pdf"):
        texto = executar_document_ai(caminho_temp)
    else:
        st.error("Formato de arquivo n√£o suportado.")
        texto = ""
    return texto

def executar_document_ai(caminho_pdf):
    credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_docai"])
    project_id = st.secrets["gcp_docai"]["project_id"]
    location = "us"
    processor_id = st.secrets["gcp_docai"]["processor_id"]

    client = documentai.DocumentUnderstandingServiceClient(credentials=credentials)
    name = f"projects/{project_id}/locations/{location}/processors/{processor_id}"

    with open(caminho_pdf, "rb") as f:
        document = {"content": f.read(), "mime_type": "application/pdf"}

    request = {"name": name, "raw_document": document}
    result = client.process_document(request=request)
    return result.document.text

# =========================
# Extra√ß√£o de cl√°usulas via IA
# =========================

def aba_validacao_clausulas():
    st.title("üßæ Valida√ß√£o das Cl√°usulas")

    contratos = obter_contratos_disponiveis()
    if not contratos:
        st.warning("Nenhum contrato dispon√≠vel.")
        return

    opcoes = [f"{titulo}" for titulo, _ in contratos]
    contrato_selecionado = st.selectbox("Selecione o contrato:", opcoes)
    titulo_arquivo, id_arquivo = next(x for x in contratos if x[0] == contrato_selecionado)

    texto = carregar_texto_contrato(titulo_arquivo, id_arquivo)
    if not texto:
        st.stop()

    with st.expander("üìÑ Visualizar texto extra√≠do do contrato"):
        st.text_area("Texto do Contrato", texto, height=400)

    if st.button("üß† Extrair Cl√°usulas com IA"):
        df_clausulas = extrair_clausulas_com_agente(texto)
        st.session_state.df_clausulas_extraidas = df_clausulas
        st.success("‚úÖ Cl√°usulas extra√≠das com sucesso!")

    if "df_clausulas_extraidas" in st.session_state:
        st.markdown("### ‚úèÔ∏è Revise as cl√°usulas extra√≠das:")
        df_editado = st.data_editor(
            st.session_state.df_clausulas_extraidas,
            num_rows="dynamic",
            use_container_width=True,
            key="editor_clausulas"
        )

        instituicao = st.text_input("Institui√ß√£o Financeira")
        if st.button("‚úÖ Validar cl√°usulas e iniciar an√°lise"):
            id_contrato = str(uuid.uuid4())
            salvar_clausulas_validadas(df_editado, id_contrato, instituicao, st.session_state.username)
            st.success("‚úÖ Cl√°usulas salvas com sucesso!")


def dividir_por_secoes_numeradas(texto):
    """
    Divide o texto contratual com base em se√ß√µes numeradas (ex: 1., 2.1, 3.4.5).
    Retorna uma lista com blocos de texto representando cada se√ß√£o.
    """
    import re
    padrao = r"(?=\n?\d{1,2}(?:\.\d{1,2})*\s)"  # <-- corrigido: grupo n√£o captur√°vel
    secoes = re.split(padrao, texto)
    secoes = [s.strip() for s in secoes if len(s.strip()) > 30]
    return secoes

def extrair_clausulas_com_agente(texto):

    st.info("üîç Iniciando extra√ß√£o das cl√°usulas com an√°lise por se√ß√£o numerada...")
    client = OpenAI(api_key=st.secrets["openai"]["api_key"])

    secoes = dividir_por_secoes_numeradas(texto)
    clausulas_extraidas = []

    prompt_base = """
Voc√™ √© um advogado especialista em contratos de d√≠vida internacionais.

Sua tarefa √© identificar cl√°usulas contratuais completas ‚Äî aquelas que representam obriga√ß√µes, condi√ß√µes, defini√ß√µes, garantias ou penalidades contratuais.

Leia o texto abaixo e extraia todas as cl√°usulas jur√≠dicas encontradas. Cada cl√°usula deve come√ßar com sua numera√ß√£o (ex: 1., 2.1, 3.1.4), seguida do t√≠tulo (se existir) e o texto completo da cl√°usula.

TEXTO DO CONTRATO:
\"\"\"{secao}\"\"\"

Responda apenas com a lista de cl√°usulas. N√£o resuma nem acrescente coment√°rios.
"""

    for i, secao in enumerate(secoes):
        with st.spinner(f"üîé Processando se√ß√£o {i+1} de {len(secoes)}..."):
            prompt = prompt_base.format(secao=secao)
            try:
                resposta = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um advogado especialista em leitura contratual."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.1,
                    max_tokens=2048
                )
                resultado = resposta.choices[0].message.content.strip()
                linhas = [linha.strip() for linha in resultado.split("\n") if linha.strip()]
                clausulas_extraidas.extend(linhas)
                time.sleep(1)
            except Exception as e:
                clausulas_extraidas.append(f"[Erro na se√ß√£o {i+1}]: {e}")
    
    clausulas_final = []
    for idx, linha in enumerate(clausulas_extraidas, start=1):
        texto_limpo = re.sub(r"^\d+(\.\d+)*\s*", "", linha)
        clausulas_final.append(f"{idx}. {texto_limpo}")

    df = pd.DataFrame(clausulas_final, columns=["clausula"])
    return df

    
# =========================
# Salvar cl√°usulas extra√≠das
# =========================
def salvar_clausulas_validadas(df_clausulas, id_contrato, instituicao, user_email):
    df = carregar_base_contratos()
    clausulas_txt = "\n".join(df_clausulas["clausula"].tolist())
    nova_linha = {
        "id_contrato": id_contrato,
        "nome_arquivo": "-",
        "data_upload": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "usuario_upload": user_email,
        "clausulas": clausulas_txt,
        "instituicao_financeira": instituicao,
        "tipo": "-",
        "idioma": "pt",
        "user_email": user_email
    }
    df = pd.concat([df, pd.DataFrame([nova_linha])], ignore_index=True)
    salvar_base_contratos(df)

            
# -----------------------------
# Renderiza√ß√£o de conte√∫do por p√°gina
# -----------------------------
if pagina == "üìÇ Upload do Contrato":
    aba_upload_contrato(user_email=st.session_state.username)
    
elif pagina == "üßæ Valida√ß√£o das Cl√°usulas":
    aba_validacao_clausulas()
    
elif pagina == "üîç An√°lise Autom√°tica":
    st.info("Execu√ß√£o dos agentes financeiros e jur√≠dicos.")
    
elif pagina == "üßë‚Äç‚öñÔ∏è Revis√£o Final":
    st.info("Revis√£o final das cl√°usulas com input do usu√°rio.")
    
elif pagina == "üìä √çndices PRIO":
    aba_indices_prio()
    
elif pagina == "üìò Relat√≥rios Gerenciais":
    st.info("Gera√ß√£o de relat√≥rios estrat√©gicos com IA.")
    
elif pagina == "üìÅ Base de Cl√°usulas Padr√£o":
    st.info("Cl√°usulas padr√£o utilizadas pelos agentes.")

